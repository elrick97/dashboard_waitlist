[{"C:\\Users\\A01338143\\Desktop\\waitlist-dashboard\\src\\index.js":"1","C:\\Users\\A01338143\\Desktop\\waitlist-dashboard\\src\\App.js":"2","C:\\Users\\A01338143\\Desktop\\waitlist-dashboard\\src\\reportWebVitals.js":"3"},{"size":500,"mtime":499162500000,"results":"4","hashOfConfig":"5"},{"size":8856,"mtime":1608068379377,"results":"6","hashOfConfig":"5"},{"size":362,"mtime":499162500000,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"v2efrs",{"filePath":"11","messages":"12","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"13"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"C:\\Users\\A01338143\\Desktop\\waitlist-dashboard\\src\\index.js",[],["16","17"],"C:\\Users\\A01338143\\Desktop\\waitlist-dashboard\\src\\App.js",["18","19","20","21","22","23","24","25","26","27"],"import React, { useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport HomeIcon from '@material-ui/icons/Home';\nimport RefreshIcon from '@material-ui/icons/Refresh';\nimport DeleteForeverIcon from '@material-ui/icons/DeleteForever';\nimport PropTypes from 'prop-types';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport Paper from '@material-ui/core/Paper';\nimport CloudDownloadIcon from '@material-ui/icons/CloudDownload';\nimport red from '@material-ui/core/colors/red';\nimport yellow from '@material-ui/core/colors/yellow';\nimport green from '@material-ui/core/colors/green';\nimport Container from '@material-ui/core/Container';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Firebase from 'firebase'\nimport { RateReview } from '@material-ui/icons';\nimport Chip from '@material-ui/core/Chip';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nimport AccessTimeIcon from '@material-ui/icons/AccessTime';\nimport swal from 'sweetalert';\n\nrequire('dotenv').config();\n\nconst json2csv = require('json2csv');\n// Your web app's Firebase configuration\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\n/* var firebaseConfig = {\n  apiKey: \"AIzaSyAduGhYR7rw9bqxggsuIKz1gwiF51_egHA\",\n  authDomain: \"botitc.firebaseapp.com\",\n  projectId: \"botitc\",\n  storageBucket: \"botitc.appspot.com\",\n  messagingSenderId: \"247885071528\",\n  appId: \"1:247885071528:web:0ad7c4a1dca7ef80cb6e9d\",\n  measurementId: \"G-1TJJXQLJ86\"\n};\n// Initialize Firebase\nFirebase.initializeApp(firebaseConfig);\n\nvar db = Firebase.firestore(); */\n\ntry {\n  Firebase.initializeApp({\n    apiKey: process.env.REACT_APP_API_KEY,\n    authDomain: \"botitc.firebaseapp.com\",\n    projectId: \"botitc\",\n    storageBucket: \"botitc.appspot.com\",\n    messagingSenderId: \"247885071528\",\n    appId: process.env.REACT_APP_APP_ID,\n    measurementId: \"G-1TJJXQLJ86\"\n  })\n} catch (err) {\n\n  if (!/already exists/.test(err.message)) {\n\n    console.error('Firebase initialization error raised', err.stack)\n\n  }\n}\n\nvar db = Firebase.firestore();\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n  table: {\n    minWidth: 650,\n  }\n}));\n\nexport default function App() {\n  const classes = useStyles();\n  const [value, setValue] = React.useState(0);\n  const [data, setData] = React.useState([]);\n  const [claves, setClaves] = React.useState([]);\n  const [showDoneAlert, setShowDoneAlert] = React.useState(false);\n  const [espera, setEspera] = React.useState(true);\n\n  const handleChange = (event, newValue) => {\n    setValue(newValue);\n  };\n\n  const fetchData = async () => {\n    var temp = []\n    var temp2 = []\n    await db.collection(\"cursos\").get()\n      .then((querySnapshot) => {\n        setData(querySnapshot.data);\n        querySnapshot.forEach((doc) => {\n          console.log(doc.data());\n          temp.push(doc.data());\n          temp2.push(doc.id);\n        });\n        setData(temp);\n        setClaves(temp2);\n      });\n  }\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  const handleDeleteAll = () => {\n    swal({\n      title: \"Borrar TODA la base de datos\",\n      text: \"¿Seguro que quiere continuar?\",\n      icon: \"warning\",\n      buttons: true,\n      dangerMode: true,\n    })\n      .then((willDelete) => {\n        if (willDelete) {\n          swal(\"Felicidades ha borrado toda la base de datos y no hay vuelta atras.\", {\n            icon: \"success\",\n          });\n        } else {\n          swal(\"Cancelado. No hay cambios.\");\n        }\n      });\n\n\n  }\n\n  const handleExport = () => {\n\n  }\n\n  const handleRefresh = () => {\n    fetchData();\n  }\n\n\n  const handleClick = (alumno, clave) => {\n    const a = alumno[0]\n    const carrera = alumno[1].carrera\n    const date = alumno[1].date\n    swal({\n      title: \"¿Alumno atendido?\",\n      text: \"¿Seguro que quiere marcar como atendido al alumno?\",\n      icon: \"warning\",\n      buttons: true,\n      dangerMode: true,\n    })\n      .then((willDelete) => {\n        if (willDelete) {\n          var data = {\n            [a]: { 'done': true, 'carrera': carrera, 'date': date }\n          }\n          const alumno = db.collection(\"cursos\").doc(clave).update(data)\n            .then(function () {\n              console.log(\"Document successfully updated!\");\n              setData([]);\n              setClaves([]);\n              fetchData();\n            })\n            .catch(function (error) {\n              // The document probably doesn't exist.\n              console.error(\"Error updating document: \", error);\n            });\n          swal(\"Cambio realizado.\", {\n            icon: \"success\",\n          });\n        } else {\n          swal(\"Cancelado. No hay cambios.\");\n        }\n      });\n    console.info('You clicked the Chip.');\n  };\n\n  const renderMatriculas = (r, clave) => {\n    return (\n      Object.entries(r).map((d) => {\n        console.log(d[1].done);\n        if (d[1].done === false) {\n          return (\n            <TableCell component=\"th\" scope=\"row\">\n              {d[0]}\n              <Chip size=\"small\" label={d[1].carrera} />\n              {d[1].done ? <Chip style={{ backgroundColor: green[500] }} size=\"small\" label=\"Atendido\" disable deleteIcon={<CheckCircleIcon />} /> : <Chip style={{ backgroundColor: yellow[500] }} size=\"small\" label=\"En Espera\" onClick={() => handleClick(d, clave)} deleteIcon={<AccessTimeIcon />} />}\n            </TableCell>\n          );\n        }\n      })\n    );\n  }\n\n  if (data) {\n    console.log(process.env)\n    return (\n      <div className={classes.root}>\n        <AppBar position=\"static\">\n          <Toolbar>\n            <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\n              <HomeIcon />\n            </IconButton>\n            <Typography variant=\"h6\" className={classes.title}>\n              Listas de Espera por Materia\n          </Typography>\n            <IconButton color=\"inherit\" onClick={() => { handleRefresh() }}>\n              <RefreshIcon />\n            </IconButton>\n            <Button color=\"inherit\" endIcon={<CloudDownloadIcon />}>Exportar</Button>\n            <IconButton style={{ color: red[500] }} fontSize=\"large\" onClick={() => { handleDeleteAll() }}>\n              <DeleteForeverIcon />\n            </IconButton>\n          </Toolbar>\n        </AppBar>\n        <Paper className={classes.root}>\n          <Container>\n            <Tabs\n              value={value}\n              onChange={handleChange}\n              indicatorColor=\"primary\"\n              textColor=\"primary\"\n            >\n              <Tab label=\"Alumnos en Espera\" />\n              <Tab label=\"Alumnos Atentidos\" />\n            </Tabs>\n          </Container>\n        </Paper>\n        <TableContainer component={Paper}>\n          <Table className={classes.table} aria-label=\"simple table\">\n            <TableHead>\n              <TableRow>\n                <TableCell>Clave</TableCell>\n\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {data.map((row, i) => (\n                <TableRow key={row.id}>\n                  <TableCell component=\"th\" scope=\"row\">\n                    {claves[i]}\n                  </TableCell>\n                  {renderMatriculas(row, claves[i])}\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </TableContainer>\n      </div>\n    );\n  } else {\n    return (\n      <div>\n        <AppBar position=\"static\">\n          <Toolbar>\n            <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\n              <HomeIcon />\n            </IconButton>\n            <Typography variant=\"h6\" className={classes.title}>\n              Listas de Espera por Materia\n          </Typography>\n            <IconButton color=\"inherit\" onClick={() => { handleRefresh() }}>\n              <RefreshIcon />\n            </IconButton>\n            <Button color=\"inherit\" endIcon={<CloudDownloadIcon />}>Exportar</Button>\n            <IconButton style={{ color: red[500] }} fontSize=\"large\" onClick={() => { handleDeleteAll() }}>\n              <DeleteForeverIcon />\n            </IconButton>\n          </Toolbar>\n        </AppBar>\n        <div>\n          No hay listas\n      </div>\n      </div>\n    )\n  }\n\n}","C:\\Users\\A01338143\\Desktop\\waitlist-dashboard\\src\\reportWebVitals.js",[],{"ruleId":"28","replacedBy":"29"},{"ruleId":"30","replacedBy":"31"},{"ruleId":"32","severity":1,"message":"33","line":11,"column":8,"nodeType":"34","messageId":"35","endLine":11,"endColumn":17},{"ruleId":"32","severity":1,"message":"36","line":27,"column":10,"nodeType":"34","messageId":"35","endLine":27,"endColumn":20},{"ruleId":"32","severity":1,"message":"37","line":35,"column":7,"nodeType":"34","messageId":"35","endLine":35,"endColumn":15},{"ruleId":"32","severity":1,"message":"38","line":93,"column":10,"nodeType":"34","messageId":"35","endLine":93,"endColumn":23},{"ruleId":"32","severity":1,"message":"39","line":93,"column":25,"nodeType":"34","messageId":"35","endLine":93,"endColumn":41},{"ruleId":"32","severity":1,"message":"40","line":94,"column":10,"nodeType":"34","messageId":"35","endLine":94,"endColumn":16},{"ruleId":"32","severity":1,"message":"41","line":94,"column":18,"nodeType":"34","messageId":"35","endLine":94,"endColumn":27},{"ruleId":"32","severity":1,"message":"42","line":141,"column":9,"nodeType":"34","messageId":"35","endLine":141,"endColumn":21},{"ruleId":"32","severity":1,"message":"43","line":166,"column":17,"nodeType":"34","messageId":"35","endLine":166,"endColumn":23},{"ruleId":"44","severity":1,"message":"45","line":189,"column":33,"nodeType":"46","messageId":"47","endLine":189,"endColumn":35},"no-native-reassign",["48"],"no-negated-in-lhs",["49"],"no-unused-vars","'PropTypes' is defined but never used.","Identifier","unusedVar","'RateReview' is defined but never used.","'json2csv' is assigned a value but never used.","'showDoneAlert' is assigned a value but never used.","'setShowDoneAlert' is assigned a value but never used.","'espera' is assigned a value but never used.","'setEspera' is assigned a value but never used.","'handleExport' is assigned a value but never used.","'alumno' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","no-global-assign","no-unsafe-negation"]